name: FINAL Smooth Stream to Telegram

on:
  workflow_dispatch:

jobs:
  stream:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
    - name: 1. Install All Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends ffmpeg xvfb wget scrot nodejs npm
        wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
        sudo apt-get install -y ./google-chrome-stable_current_amd64.deb || true
        rm google-chrome-stable_current_amd64.deb

    - name: 2. Setup Puppeteer with Plugins and Create Script
      run: |
        npm i puppeteer-extra puppeteer-extra-plugin-stealth puppeteer-extra-plugin-adblocker

        # Create the final automation script (start.js)
        cat <<'EOF' > start.js
        const puppeteer = require('puppeteer-extra');
        const StealthPlugin = require('puppeteer-extra-plugin-stealth');
        const AdblockerPlugin = require('puppeteer-extra-plugin-adblocker');

        puppeteer.use(StealthPlugin());
        puppeteer.use(AdblockerPlugin({ blockTrackers: true }));

        (async () => {
          // --- IMPORTANT: PASTE YOUR SELECTOR HERE ---
          // Find the exact selector for the unmute button and paste it below.
          const UNMUTE_SELECTOR = 'PASTE_YOUR_SELECTOR_HERE';

          console.log('üöÄ Launching browser...');
          const browser = await puppeteer.launch({
            headless: false,
            executablePath: '/usr/bin/google-chrome',
            ignoreDefaultArgs: ['--mute-audio'],
            args: [
              '--no-sandbox',
              '--disable-gpu',
              '--disable-dev-shm-usage',
              '--window-size=1280,720',
              '--display=:99'
            ]
          });

          const page = await browser.newPage();
          await page.setViewport({ width: 1280, height: 720 });
          
          console.log(' Navigating to page...');
          await page.goto('https://www.touristy.top/frame/11.php', { waitUntil: 'networkidle2' });

          console.log('‚úÖ Clicking page to start video...');
          await new Promise(resolve => setTimeout(resolve, 5000)); // Wait 5s
          await page.click('body');

          console.log(`üîä Searching for unmute button: ${UNMUTE_SELECTOR}`);
          try {
            await page.waitForSelector(UNMUTE_SELECTOR, { timeout: 10000 });
            await page.click(UNMUTE_SELECTOR);
            console.log('‚úÖ Unmute successful!');
          } catch (error) {
            console.error('‚ùå CRITICAL: Could not find unmute button. Check your selector.');
          }
          
          await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2s

          console.log('üì∫ Forcing video to fullscreen...');
          try {
            await page.evaluate(() => {
              document.querySelector('video').requestFullscreen();
            });
            console.log('‚úÖ Fullscreen request sent.');
          } catch (error) {
            console.error('‚ùå Could not find video element to make fullscreen.');
          }
        })();
        EOF

    - name: 3. Start Smooth-Quality Stream
      env:
        TELEGRAM_RTMP_URL: ${{ secrets.TELEGRAM_RTMP_URL }}
      run: |
        echo "‚úÖ Starting virtual display..."
        Xvfb :99 -screen 0 1280x720x24 &
        echo "‚úÖ Running final automation script..."
        node start.js &
        echo "‚è≥ Waiting 30 seconds for all actions to complete..."
        sleep 30
        echo "üì∏ Taking final debug screenshot..."
        DISPLAY=:99 scrot -d 1 -q 100 'debug_screenshot.jpg' -e 'mv $f /tmp/'
        
        echo "üöÄ Starting SMOOTH FFmpeg stream for Telegram..."
        # --- Optimized settings for smooth, stable streaming ---
        ffmpeg -nostdin \
               -f x11grab -draw_mouse 0 -r 30 -s 1280x720 -i :99 \
               -c:v libx264 -preset veryfast -b:v 3000k -maxrate 3500k -bufsize 6000k -pix_fmt yuv420p -g 60 \
               -c:a aac -b:a 128k -ar 44100 \
               -f flv "$TELEGRAM_RTMP_URL"

    - name: 4. Upload Debug Screenshot
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: debug-screenshot
        path: /tmp/debug_screenshot.jpg
