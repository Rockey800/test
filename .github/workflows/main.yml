name: Telegram Live Stream (720p)

on:
  workflow_dispatch:

jobs:
  stream:
    runs-on: ubuntu-latest
    timeout-minutes: 300  # 5 hours max

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install FFmpeg
        run: |
          sudo apt update
          sudo apt install -y ffmpeg

      - name: Start Telegram Live Stream (720p)
        env:
          SOURCE_URL: "http://1tv41.icu:8080/5ZCJFs/416986/1846"
          TELEGRAM_URL: ${{ secrets.TELEGRAM_URL }}
          TELEGRAM_KEY: ${{ secrets.TELEGRAM_KEY }}
        run: |
          #!/bin/bash
          set -e

          MAX_RETRIES=10  # Increased retries
          RETRY_DELAY=3   # Shorter delay for faster recovery
          MIN_DURATION=480  # 8 minutes in seconds, to detect early failure

          for i in $(seq 1 $MAX_RETRIES); do
              echo "ðŸ”„ Starting Telegram Live Stream attempt $i/$MAX_RETRIES"

              # Start FFmpeg with timeout to force restart if it runs too short
              timeout $MIN_DURATION ffmpeg -re -thread_queue_size 2048 -i "$SOURCE_URL" \
                -reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5 -reconnect_at_eof 1 \
                -fflags +genpts+discardcorrupt \
                -c:v libx264 -preset veryfast -b:v 2500k -g 60 -keyint_min 60 -vf "scale=1280:720" \
                -c:a aac -b:a 128k -ar 44100 -ac 2 \
                -f flv -bufsize 10000k -max_delay 500000 -min_seg_duration 100000 -y "$TELEGRAM_URL/$TELEGRAM_KEY" -loglevel warning &
              STREAM_PID=$!

              # Wait for FFmpeg to finish
              wait $STREAM_PID 2>/dev/null
              EXIT_CODE=$?

              if [ $EXIT_CODE -eq 124 ]; then
                  echo "Stream stopped early (less than $MIN_DURATION seconds), retrying in $RETRY_DELAY seconds..."
                  sleep $RETRY_DELAY
                  continue
              elif [ $EXIT_CODE -ne 0 ]; then
                  echo "Streaming failed, cleaning up and retrying in $RETRY_DELAY seconds..."
                  kill $STREAM_PID 2>/dev/null || true
                  sleep $RETRY_DELAY
                  continue
              fi

              echo "Stream completed successfully, exiting..."
              exit 0
          done
