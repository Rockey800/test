name: Ad-Blocking Stream to Telegram

on:
  workflow_dispatch:

jobs:
  stream:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
    - name: 1. Install All Dependencies
      run: |
        sudo apt-get update
        # Install tools for streaming, screenshots, and Node.js
        sudo apt-get install -y --no-install-recommends ffmpeg xvfb wget scrot nodejs npm
        
        # Install Google Chrome
        wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
        sudo apt-get install -y ./google-chrome-stable_current_amd64.deb || true
        rm google-chrome-stable_current_amd64.deb

    - name: 2. Setup Puppeteer with Adblocker and Create Script
      run: |
        # Install Puppeteer and plugins for ad-blocking and stealth
        npm i puppeteer-extra puppeteer-extra-plugin-stealth puppeteer-extra-plugin-adblocker

        # Create the advanced automation script (start.js)
        cat <<'EOF' > start.js
        const puppeteer = require('puppeteer-extra');
        const StealthPlugin = require('puppeteer-extra-plugin-stealth');
        const AdblockerPlugin = require('puppeteer-extra-plugin-adblocker');

        // Activate the stealth and adblocker plugins
        puppeteer.use(StealthPlugin());
        puppeteer.use(AdblockerPlugin({ blockTrackers: true }));

        (async () => {
          // You can still try to find a more specific selector, but the adblocker should help.
          const CLICK_SELECTOR = 'body'; 

          console.log('üöÄ Launching browser with adblocker and stealth mode...');
          const browser = await puppeteer.launch({
            headless: false, // Must be false to run in the virtual display
            executablePath: '/usr/bin/google-chrome',
            args: [
              '--no-sandbox',
              '--disable-gpu',
              '--disable-dev-shm-usage',
              '--window-size=1280,720',
              '--display=:99' // Target the virtual display
            ]
          });

          const page = await browser.newPage();
          await page.setViewport({ width: 1280, height: 720 });
          
          console.log(' Navigating to page...');
          await page.goto('https://www.touristy.top/frame/11.php', { waitUntil: 'networkidle2' });

          console.log('‚úÖ Page loaded. Attempting to click to start video...');
          try {
            await page.waitForSelector(CLICK_SELECTOR, { timeout: 15000 });
            await page.click(CLICK_SELECTOR);
            console.log('‚úÖ Click successful. Video should now be playing.');
          } catch (error) {
            console.error('‚ùå Could not perform click, but the adblocker may have been enough.');
          }
        })();
        EOF

    - name: 3. Start Stream
      env:
        TELEGRAM_RTMP_URL: ${{ secrets.TELEGRAM_RTMP_URL }}
      run: |
        echo "‚úÖ Starting virtual display..."
        Xvfb :99 -screen 0 1280x720x24 &

        echo "‚úÖ Running the auto-start script in the background..."
        node start.js &

        echo "‚è≥ Waiting 25 seconds for automation and video start..."
        sleep 25

        echo "üì∏ Taking a debug screenshot..."
        DISPLAY=:99 scrot -d 1 -q 100 'debug_screenshot.jpg' -e 'mv $f /tmp/'

        echo "üöÄ Starting FFmpeg stream..."
        ffmpeg -nostdin \
               -f x11grab -draw_mouse 0 -r 30 -s 1280x720 -i :99 \
               -c:v libx264 -preset ultrafast -pix_fmt yuv420p \
               -c:a aac -b:a 128k -ar 44100 \
               -f flv "$TELEGRAM_RTMP_URL"

    - name: 4. Upload Debug Screenshot
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: debug-screenshot
        path: /tmp/debug_screenshot.jpg
