name: Telegram Live Stream (Buffered)

on:
  workflow_dispatch:

jobs:
  stream:
    runs-on: ubuntu-latest
    timeout-minutes: 140

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Start streaming
        env:
          SOURCE_URL: ${{ secrets.SOURCE_URL }}
          TELEGRAM_URL: ${{ secrets.TELEGRAM_URL }}
          TELEGRAM_KEY: ${{ secrets.TELEGRAM_KEY }}
          BUFFER_SECONDS: 30
          USER_AGENT: VLC/3.0.20
        run: |
          set -e
          mkdir -p buffer

          echo "Buffer = $BUFFER_SECONDS seconds"

          # Writer: IPTV → MPEG-TS chunks
          writer_loop() {
            while true; do
              echo "[WRITER] starting $(date)"
              ffmpeg -hide_banner -loglevel warning \
                -user_agent "$USER_AGENT" \
                -timeout 10000000 \
                -reconnect 1 -reconnect_streamed 1 -reconnect_at_eof 1 -reconnect_delay_max 10 \
                -i "$SOURCE_URL" \
                -c copy -f mpegts buffer/live.ts || true
              echo "[WRITER] crashed, retry in 5s..."
              sleep 5
            done
          }

          # Reader: delayed MPEG-TS → Telegram (forces continuous timestamps)
          reader_loop() {
            while true; do
              echo "[READER] starting $(date)"
              ffmpeg -hide_banner -loglevel warning \
                -itsoffset $BUFFER_SECONDS -i buffer/live.ts \
                -fflags +genpts+discardcorrupt+igndts+nobuffer \
                -use_wallclock_as_timestamps 1 \
                -avoid_negative_ts make_zero \
                -c:v libx264 -preset veryfast -b:v 2500k -vf "scale=1280:720" \
                -c:a aac -b:a 128k -ar 44100 -ac 2 \
                -f flv "$TELEGRAM_URL/$TELEGRAM_KEY" || true
              echo "[READER] crashed, retrying in 5s..."
              sleep 5
            done
          }

          # Cleanup old files
          cleanup_loop() {
            while true; do
              sleep 60
              find buffer -type f -name '*.ts' -mmin +5 -delete
            done
          }

          # Start writer in background
          writer_loop > writer.log 2>&1 &

          # Start cleanup in background
          cleanup_loop > cleanup.log 2>&1 &

          # Wait buffer time before starting reader
          sleep $BUFFER_SECONDS
          echo "Buffer ready (delaying output by $BUFFER_SECONDS seconds)."

          # Start reader
          reader_loop
