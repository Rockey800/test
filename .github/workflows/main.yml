name: ESPN4 Live Stream Kiosk (3h)

on:
  workflow_dispatch:  # Manual trigger from GitHub UI

jobs:
  stream:
    runs-on: ubuntu-latest  # GITHUB-HOSTED UBUNTU (LATEST)
    timeout-minutes: 180    # 3 HOURS MAX
    env:
      DISPLAY: :99
      TELEGRAM_RTMP_URL: ${{ secrets.TELEGRAM_RTMP_URL }}
      CHROME_EXTENSION_PATH: /home/runner/chrome-extensions/ublock-origin
      PAGE_URL: https://rojadirectatv.cv/espn4.php
      RESOLUTION: 1920x1080
      CROP: "1280:720:0:180"  # Remove or set empty to disable crop

    steps:
      # ------------------------------------------------------------------
      # 1. Install All Dependencies
      # ------------------------------------------------------------------
      - name: Install system packages
        run: |
          sudo apt update -qq
          sudo apt install -y \
            nginx libnginx-mod-rtmp xvfb ffmpeg nodejs npm build-essential \
            wget unzip git pulseaudio \
            libxss1 libnss3 libatk-bridge2.0-0 libdrm2 libxkbcommon0 \
            libatspi2.0-0 libxcomposite1 libxdamage1 libxrandr2 libgbm1 \
            libasound2 libgtk-3-0

      - name: Install Google Chrome
        run: |
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt update -qq
          sudo apt install -y google-chrome-stable

      - name: Install Puppeteer
        run: sudo npm install -g puppeteer

      # ------------------------------------------------------------------
      # 2. Download & Extract uBlock Origin (Best AdBlock)
      # ------------------------------------------------------------------
      - name: Download uBlock Origin
        run: |
          mkdir -p ~/chrome-extensions
          cd ~/chrome-extensions
          wget -q "https://clients2.google.com/service/update2/crx?response=redirect&prodversion=91.0&x=id%3Dcjpalhdlnbpafiamejdnhcphjbkeiagm%26uc" -O ublock.crx
          unzip -q ublock.crx -d ublock-origin

      # ------------------------------------------------------------------
      # 3. Create Puppeteer Kiosk Script
      # ------------------------------------------------------------------
      - name: Create kiosk-stream.js
        run: |
          cat > ~/kiosk-stream.js << 'EOF'
          const puppeteer = require('puppeteer');
          const path = require('path');

          (async () => {
            const browser = await puppeteer.launch({
              headless: false,
              executablePath: '/usr/bin/google-chrome-stable',
              args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-gpu',
                '--no-first-run',
                '--no-zygote',
                '--window-size=1920,1080',
                '--start-maximized',
                '--autoplay-policy=no-user-gesture-required',
                '--disable-web-security',
                '--allow-running-insecure-content',
                `--disable-extensions-except=${process.env.CHROME_EXTENSION_PATH}`,
                `--load-extension=${process.env.CHROME_EXTENSION_PATH}`
              ],
              defaultViewport: { width: 1920, height: 1080 }
            });

            const page = await browser.newPage();
            console.log('Loading ESPN4 stream...');
            await page.goto(process.env.PAGE_URL, { waitUntil: 'networkidle2', timeout: 60000 });

            await page.waitForSelector('video, iframe, .player', { timeout: 30000 }).catch(() => {
              console.log('Player selector not found, but continuing...');
            });

            console.log('Stream loaded with uBlock + fullscreen');
            await new Promise(() => {});  // Keep alive
          })();
          EOF

      # ------------------------------------------------------------------
      # 4. Create Start Script (Xvfb + FFmpeg + RTMP)
      # ------------------------------------------------------------------
      - name: Create start-stream.sh
        run: |
          cat > ~/start-stream.sh << 'EOF'
          #!/bin/bash
          set -e

          export DISPLAY=:99
          echo "Starting Xvfb..."
          Xvfb :99 -screen 0 1920x1080x24 -ac +extension GLX +render -noreset &
          sleep 3

          echo "Launching Chrome kiosk..."
          node ~/kiosk-stream.js &
          CHROME_PID=$!

          sleep 15  # Wait for stream

          echo "Starting FFmpeg → RTMP..."
          CROP_FILTER=""
          if [ -n "$CROP" ] && [ "$CROP" != "none" ]; then
            CROP_FILTER="-vf crop=$CROP"
          fi

          ffmpeg -f x11grab -video_size 1920x1080 -framerate 30 -i :99 \
            $CROP_FILTER \
            -c:v libx264 -preset fast -b:v 3000k -maxrate 3000k -bufsize 6000k \
            -g 60 -keyint_min 60 \
            -c:a aac -b:a 160k -ar 44100 \
            -f flv rtmp://localhost/live/stream

          echo "Stream ended."
          kill $CHROME_PID || true
          pkill Xvfb || true
          EOF
          chmod +x ~/start-stream.sh

      # ------------------------------------------------------------------
      # 5. Configure Nginx RTMP (Push to Telegram)
      # ------------------------------------------------------------------
      - name: Configure Nginx with Telegram RTMP
        run: |
          if [ -z "$TELEGRAM_RTMP_URL" ]; then
            echo "ERROR: TELEGRAM_RTMP_URL is missing!"
            exit 1
          fi

          sudo bash -c "cat > /etc/nginx/nginx.conf" << EOF
          user  nginx;
          worker_processes  auto;
          error_log /var/log/nginx/error.log warn;
          pid /run/nginx.pid;

          events {
              worker_connections 1024;
          }

          rtmp {
              server {
                  listen 1935;
                  chunk_size 4096;

                  application live {
                      live on;
                      record off;
                      allow publish 127.0.0.1;
                      deny publish all;
                      push $TELEGRAM_RTMP_URL;
                  }
              }
          }
          EOF

          sudo nginx -t && sudo systemctl restart nginx

      # ------------------------------------------------------------------
      # 6. RUN THE 3-HOUR STREAM
      # ------------------------------------------------------------------
      - name: Start 3-hour live stream
        run: |
          echo "Starting ESPN4 → Telegram (3h max)..."
          timeout 10800 ~/start-stream.sh || echo "Stream ended (timeout/error)"
        # 10800 sec = 3 hours

      # ------------------------------------------------------------------
      # 7. Cleanup
      # ------------------------------------------------------------------
      - name: Cleanup
        if: always()
        run: |
          sudo pkill -f chrome || true
          sudo pkill Xvfb || true
          sudo systemctl stop nginx || true