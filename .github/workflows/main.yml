name: IPTV ‚Üí mpv ‚Üí Telegram Live (Stable 720p)

on:
  workflow_dispatch:

jobs:
  stream:
    runs-on: ubuntu-latest
    timeout-minutes: 300

    env:
      IPTV_SOURCE: ${{ secrets.IPTV_SOURCE }}
      TELEGRAM_SOURCE_URL: ${{ secrets.TELEGRAM_SOURCE_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update -qq
          sudo apt install -y mpv ffmpeg pulseaudio alsa-utils curl

      - name: Start PulseAudio
        run: |
          pulseaudio --start --exit-idle-time=-1 || true
          sleep 3
          echo "‚úÖ PulseAudio started"

      - name: Start mpv local restreamer
        run: |
          echo "Starting mpv as local HTTP restreamer..."
          nohup mpv "$IPTV_SOURCE" \
            --no-terminal \
            --really-quiet \
            --loop=inf \
            --cache=yes \
            --cache-secs=10 \
            --demuxer-readahead-secs=15 \
            --demuxer-max-bytes=100M \
            --audio-device=pulse \
            --http-port=8080 \
            --http-header-fields="Access-Control-Allow-Origin: *" \
            > mpv.log 2>&1 &

          sleep 10
          echo "mpv restreamer started on http://localhost:8080"
          curl -s --head http://localhost:8080 || echo "‚ö†Ô∏è mpv HTTP not responding yet"

      - name: Stream to Telegram (with retry)
        run: |
          retries=0
          max_retries=8

          while [ $retries -lt $max_retries ]; do
            echo "=== Stream attempt $((retries + 1)) ==="

            ffmpeg \
              -reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5 \
              -fflags +nobuffer -flush_packets 0 \
              -use_wallclock_as_timestamps 1 \
              -i http://127.0.0.1:8080 \
              -c:v libx264 -preset veryfast -tune zerolatency \
              -b:v 2500k -maxrate 3000k -bufsize 6000k \
              -g 60 -keyint_min 30 \
              -c:a aac -b:a 128k -ar 44100 -ac 2 \
              -f flv "$TELEGRAM_SOURCE_URL" > ffmpeg.log 2>&1 &

            FFMPEG_PID=$!
            echo "ffmpeg PID: $FFMPEG_PID"

            # Monitor stream every 30s
            while kill -0 $FFMPEG_PID 2>/dev/null; do
              sleep 30
              echo "üì° Stream running smoothly..."
            done

            wait $FFMPEG_PID
            code=$?

            echo "ffmpeg exited with code $code"
            tail -n 20 ffmpeg.log || true

            if [ $code -eq 0 ]; then
              echo "‚úÖ Stream ended normally."
              break
            fi

            retries=$((retries + 1))
            echo "‚ö†Ô∏è Retry in 5s... ($retries/$max_retries)"
            sleep 5
          done

          if [ $retries -eq $max_retries ]; then
            echo "‚ùå Stream failed after $max_retries retries."
            exit 1
          fi
