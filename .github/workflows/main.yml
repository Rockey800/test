name: HYBRID Direct and Screen Capture Stream

on:
  workflow_dispatch:
    inputs:
      page_url:
        description: 'URL of the page to stream from'
        required: true
        default: 'https://www.redditsoccerstreams.name/hd-2/'

jobs:
  stream:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
    - name: 1. Install All Dependencies
      run: |
        sudo apt-get update
        # yt-dlp is the key new dependency
        sudo apt-get install -y --no-install-recommends ffmpeg xvfb wget scrot nodejs npm git python3-pip
        pip3 install yt-dlp
        
        # Install Google Chrome for the fallback method
        wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
        sudo apt-get install -y ./google-chrome-stable_current_amd64.deb || true
        rm google-chrome-stable_current_amd64.deb

    - name: 2. Attempt to Extract Direct Stream URL
      id: extract
      run: |
        echo "✅ Attempting to find direct video URL with yt-dlp..."
        # Try to get the .m3u8 manifest URL. If found, save it to a file.
        # The '--no-warnings' flag keeps the output clean.
        # '|| true' ensures the step doesn't fail if no URL is found.
        DIRECT_URL=$(yt-dlp --get-url --no-warnings "${{ github.event.inputs.page_url }}" || true)
        
        if [[ $DIRECT_URL == *"m3u8"* ]]; then
          echo "✅ SUCCESS: Found direct stream URL!"
          echo "$DIRECT_URL"
          # Set the output for the next steps
          echo "stream_url=$DIRECT_URL" >> $GITHUB_OUTPUT
          echo "method=direct" >> $GITHUB_OUTPUT
        else
          echo "❌ FAILED: Could not find direct stream URL. Will use fallback screen-capture method."
          echo "method=fallback" >> $GITHUB_OUTPUT
        fi

    - name: 3. Stream Directly (If URL Was Found)
      if: steps.extract.outputs.method == 'direct'
      env:
        TELEGRAM_RTMP_URL: ${{ secrets.TELEGRAM_RTMP_URL }}
      run: |
        echo "🚀 Starting DIRECT stream. This is very efficient."
        # Use -c copy to re-stream without re-encoding. This is extremely light on the CPU.
        ffmpeg -i "${{ steps.extract.outputs.stream_url }}" \
               -c copy -f flv "$TELEGRAM_RTMP_URL"

    - name: 4. Stream via Screen Capture (Fallback Method)
      if: steps.extract.outputs.method == 'fallback'
      env:
        TELEGRAM_RTMP_URL: ${{ secrets.TELEGRAM_RTMP_URL }}
      run: |
        echo "🚀 Starting FALLBACK screen-capture stream."
        # This block contains the robust screen-capture script from before
        git clone https://github.com/vitttal-b/auto-unmute-chrome-extension.git unmute-extension
        npm i puppeteer-extra puppeteer-extra-plugin-stealth puppeteer-extra-plugin-adblocker

        cat <<'EOF' > start.js
        const puppeteer = require('puppeteer-extra');
        const StealthPlugin = require('puppeteer-extra-plugin-stealth');
        const AdblockerPlugin = require('puppeteer-extra-plugin-adblocker');
        puppeteer.use(StealthPlugin());
        puppeteer.use(AdblockerPlugin({ blockTrackers: true }));
        (async () => {
          const EXTENSION_PATH = './unmute-extension';
          const browser = await puppeteer.launch({
            headless: false, executablePath: '/usr/bin/google-chrome',
            ignoreDefaultArgs: ['--mute-audio'],
            args: [
              '--no-sandbox', '--disable-gpu', '--disable-dev-shm-usage',
              '--window-size=1280,720', '--display=:99',
              `--disable-extensions-except=${EXTENSION_PATH}`,
              `--load-extension=${EXTENSION_PATH}`
            ]
          });
          const page = await browser.newPage();
          await page.setViewport({ width: 1280, height: 720 });
          await page.goto('${{ github.event.inputs.page_url }}', { waitUntil: 'networkidle2' });
          await new Promise(resolve => setTimeout(resolve, 10000));
          await page.click('body');
          await new Promise(resolve => setTimeout(resolve, 3000));
          try {
            await page.evaluate(() => { document.querySelector('video').requestFullscreen(); });
          } catch (error) { console.error('Fullscreen failed.'); }
        })();
        EOF

        Xvfb :99 -screen 0 1280x720x24 &
        node start.js &
        sleep 30

        ffmpeg -nostdin -f x11grab -draw_mouse 0 -r 30 -s 1280x720 -i :99 \
               -c:v libx264 -preset veryfast -b:v 3500k -pix_fmt yuv420p -g 60 \
               -c:a aac -b:a 160k -ar 44100 \
               -f flv "$TELEGRAM_RTMP_URL"
